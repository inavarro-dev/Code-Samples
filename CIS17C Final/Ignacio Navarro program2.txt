Main.cpp////////////////////////////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <string>
#include "Student.h"
#include "StudentList.h"

using namespace std;

int main()
{
	/*A.Insert a new record
	B.Delete a record
	C.Edit a record - Make changes to a record.Maybe a date has changed or an entrance fee has changed.
	D.Display all records
	E.Exit.  (The user can close the program by entering X)*/
	StudentList * students = new StudentList;
	int choice;
	students->loadFromFile();

	cout << "Welcome to Student Gradebook\n\n\n";

	do
	{

		cout << "1. Insert New Student.\n";
		cout << "2. Delete an existing Student.\n";
		cout << "3. Change a student's grade.\n";
		cout << "4. Display a list of all students\n";
		cout << "5. Exit and save.\n\n";
		cout << "Please make your Selection:   ";

		cin >> choice;

		system("cls");

		switch (choice) {
		case 1:
		{
			string firstName;
			string lastName;
			int id;
			char grade;

			cout << "Insert student info :\n\n";
			cout << "First Name: ";
			cin >> firstName;
			cout << "\nLast Name: ";
			cin >> lastName;
			cout << "\nID: ";
			cin >> id;
			cout << "\nGrade: ";
			cin >> grade;
			cout << endl;

			students->insertStudent(firstName, lastName,grade, id);
			break;
		}
		case 2:
		{
			int id;
			cout << "Enter student's ID that you wish to delete:\n\n";
			cin >> id;
			students->deleteStudent(id);
			break;
		}
		case 3:
		{
			int id;
			cout << "Enter the ID of the student who's grade you'd like to change:\n\n";
			cin >> id;
			students->changeStudent(id);
			break;
		}
		case 4:
		{
			cout << "Displaying List of students:\n\n";
			students->displayList();
			break;
		}
		case 5:
			cout << "Saving list to file and exiting" << endl;
			students->saveToFile();
			break;
		default:
			cout << "Invalid selection" << endl;
		}
		system("pause");
		system("cls");
	} while (choice != 5);

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Student.h///////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#ifndef STUDENT_H
#define STUDENT_H
#include <iostream>
#include <string>

using namespace std;

struct Student
{
	string firstName;
	string lastName;
	char grade;
	int id;
};

#endif



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

StudentList.h///////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#pragma once
#ifndef STUDENTLIST_H
#define STUDENTLIST_H
#include <iostream>
#include <string>
#include "Student.h"

const int MAX_ITEMS = 100;

class StudentList
{
private:
	int length;
	Student students[MAX_ITEMS];
public:
	StudentList();
	~StudentList();
	void insertStudent(string firstName, string lastName, char grade, int id);
	void deleteStudent(int id);
	void changeStudent(int id);
	bool isEmpty()const;
	bool isFull()const;
	int binarySearchInsert(int id);
	int binarySearchMod(int id);
	void displayList()const;
	void loadFromFile();
	void saveToFile();
};

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

StudentList.cpp/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "StudentList.h"
#include <fstream>

StudentList::StudentList()
{
	length = 0;
}

StudentList::~StudentList()
{
}

void StudentList::insertStudent(string firstName, string lastName, char grade, int id)
{
	//use bin search mod to check if there is an item with the same id in list if -2 is not returned, item is already in the list.
	if (binarySearchMod(id) != -2)
	{
		cout << "ID is already in the list, could not add new student.\n\n";
		return;
	}
	if (isFull())
	{
		cout << "List is full, cannot add student.\n\n";
		return;
	}
	//Uses binarySearchInsert() to find where the new id would fit into the list.
	int locationToInsert;
	locationToInsert = binarySearchInsert(id);

	//using this location make space for new student item on list pushing all other items 
	//back by one starting from the back of the list in order to preserve all data.
	for (int i = length; i > (locationToInsert - 1); i--)
	{
		students[i].firstName = students[i - 1].firstName;
		students[i].lastName = students[i - 1].lastName;
		students[i].grade = students[i - 1].grade;
		students[i].id = students[i - 1].id;
	}
	//once space is open, add new student data to the open space and increment length.
	students[locationToInsert].firstName = firstName;
	students[locationToInsert].lastName = lastName;
	students[locationToInsert].grade = grade;
	students[locationToInsert].id = id;
	length++;
}

void StudentList::deleteStudent(int id)
{
	//checks if list is empty before doing anything to save on performance
	if (isEmpty())
	{
		cout << "List is Empty, nothing to delete.\n\n";
		return;
	}
	int locationToDelete;

	//calls the binary search for modification function passing in the ID they want to delete
	locationToDelete = binarySearchMod(id);

	// -2 can only be returned if the search fails to find the ID within the array.
	if (locationToDelete == -2)
	{
		cout << "Error: Student not found within list.\n\n";
			return;
	}
	//goes to index that is to be deleted and moves all items higher in the list down by one effectively deleting the item from the list.
	for (int i = locationToDelete + 1; i < length; i++)
	{
		students[i - 1].firstName = students[i].firstName;
		students[i - 1].lastName = students[i].lastName;
		students[i - 1].grade = students[i].grade;
		students[i - 1].id = students[i].id;
	}
	length--;
}

void StudentList::changeStudent(int id)
{
	//checks if list is empty before doing anything to save on performance
	if (isEmpty())
	{
		cout << "List is Empty, nothing to modify.\n\n";
		return;
	}

	
	int locationToMod;
	char newGrade;


	//calls the binary search for modification function passing in the ID they want to edit
	locationToMod = binarySearchMod(id);

	// -2 can only be returned if the search fails to find the ID within the array.
	if (locationToMod == -2)
	{
		cout << "Student not found within list.\n\n";
		return;
	}
	//goes to index that is to be edited and prompts user to enter a new grade for student.
	cout << students[locationToMod].firstName << " " << students[locationToMod].lastName << "'s current grade is " << students[locationToMod].grade
		<< " what would you like to change it to? \n\n";
	cin >> newGrade;
	//Updates grade for student.
	students[locationToMod].grade = newGrade;
	cout << students[locationToMod].firstName << " " << students[locationToMod].lastName << "'s grade has been updated\n\n";

}

bool StudentList::isEmpty() const
{
	return (length == 0);
}

bool StudentList::isFull()const
{
	return (length == MAX_ITEMS);
}

int StudentList::binarySearchInsert(int id)
{

	//the int being returned is the index that will be filled in. everything else will be pushed back.
	int first = 0;
	int midpoint = 0;
	int last = length - 1;

	while (true)
	{
		//if the list is empty return first slot
		if (isEmpty())
		{
			return first;
		}
		//if the id is smaller than everything in the list return the first slot
		if (id < students[first].id && id < students[last].id)
		{
			return first;
		}
		//if the id is greater than everything in the list return the slot after the last position.
		if (id > students[first].id && id > students[last].id)
		{
			return last + 1;
		}

		// if the new item being created fits between the two adjacent slots return the last position.
		if ((last == (first + 1)) && (id > students[first].id) && id < students[last].id)
		{
			return last;
		}

		midpoint = (first + last) / 2;
		//repositions first last and midpoint to find the two adjacent slots that the new item fits between.
		if (id > students[midpoint].id)
		{
			first = (midpoint + 1);
		}
		else if (id < students[midpoint].id)
		{
			last = (midpoint - 1);
		}		
		
	}
}

int StudentList::binarySearchMod(int id)
{
	int first = 0;
	int midpoint = 0;
	int last = length - 1;

	while (true)
	{
		if (first > last)
		{
			if (id != students[first].id && id != students[last].id)
			{
				return -2;
			}
			else if (id == students[first].id)
			{
				return first;
			}
			else if (id == students[last].id)
			{
				return last;
			}
		}
		midpoint = (first + last) / 2;

		if (id == students[midpoint].id)
		{
			return midpoint;
		}
		else if (id > students[midpoint].id)
		{
			first = (midpoint + 1);
		}
		else if (id < students[midpoint].id)
		{
			last = (midpoint - 1);
		}
	}
}

void StudentList::displayList() const
{
	for (int i = 0; i < length; i++)
	{
		cout << "Name: " << students[i].firstName << " " << students[i].lastName << endl;
		cout << "ID: " << students[i].id << endl;
		cout << "Grade: " << students[i].grade << endl << endl;
	}

}

void StudentList::loadFromFile()
{
	
	//Creates a dataFile fstream object and a temp pointer to insert nodes into a list.
	fstream dataFile;
	//Student * temp = new Student;
	//Opens StudentData.txt for for input.
	dataFile.open("StudentData.txt", ios::in);
	//checks for errors in opening the file;
	if (dataFile.fail())
	{
		cout << "Error opening file!\n\n";
		return;
	}

	int i = 0;
	while (!dataFile.eof())
	{
		//cout << "Loading Students.";
		dataFile >> students[i].firstName;
		dataFile >> students[i].lastName;
		dataFile >> students[i].id;
		dataFile >> students[i].grade;
		i++;
		length++;
		if (dataFile.eof())
		{
			length--;
		}
	} while (!dataFile.eof());

	dataFile.close();


}

void StudentList::saveToFile()
{
	//Creates a dataFile fstream variable to hold file.
	fstream dataFile;
	//Opens StudentData.txt for for input.
	dataFile.open("StudentData.txt", ios::out);
	//checks for errors in opening the file;
	if (dataFile.fail())
	{
		cout << "Error opening file!\n\n";
		return;
	}

	
	for (int i = 0; i < length; i++)
	{
		dataFile << students[i].firstName << endl;
		dataFile << students[i].lastName << endl;
		dataFile << students[i].id << endl;
		dataFile << students[i].grade << endl;
	}
	dataFile.close();

}
